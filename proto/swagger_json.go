package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_trolley_proto_trolley_business_trolley_business_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x4b\x6b\x2b\x37\x14\xde\xfb\x57\x08\xb5\xcb\x10\xa7\xa1\x74\x91\x5d\x6a\x4c\x93\xa6\x4d\xca\x8c\x0d\x85\x12\x8c\x3c\x73\xec\x28\x19\x49\x13\x3d\x5c\x4c\xf1\xa2\x50\x4a\xda\x45\xba\xe8\x03\xda\x55\x17\xa5\x8f\x45\xa0\x8b\x42\x0a\xe1\xfe\x9b\x38\xce\xfd\x17\x17\x8d\xc7\x13\x79\x66\xec\x38\xaf\x9b\x84\x7b\xbd\xf2\x9c\x73\x74\xf4\x7d\x47\xdf\x39\xd2\x57\x15\x84\xb0\xfa\x92\x74\xbb\x20\xf1\x1a\xc2\xab\xcb\x2b\x78\xc9\xda\x28\xef\x08\xbc\x86\xac\x1f\x21\xac\xa9\x8e\xc0\xfa\x63\x29\xb4\xa8\x32\x1a\x48\xd1\x62\x24\x8a\x5a\x5a\x8a\x28\x82\x7e\x6b\xec\x98\x7c\xb5\x8d\xa2\x1c\x94\x2a\x18\x96\x93\xb8\x64\x0b\x84\x70\x0f\xa4\xa2\x82\xdb\xc4\xe9\x5f\xc4\x85\x46\x0a\x34\xae\x20\x34\x48\x80\x04\x82\x2b\xc3\x40\xe1\x35\xf4\xc5\x78\x15\x89\xe3\x88\x06\x44\x53\xc1\xab\xfb\x4a\x70\x1b\xbb\x9b\xc4\xc6\x52\x84\x26\x58\x30\x96\xe8\x3d\x75\xc5\xb0\xda\x7b\x6f\x02\xb6\xaa\x0e\x4c\x75\x5f\x50\x9e\x79\x6d\xb8\xd1\xce\xa7\x2d\x9a\x61\x8c\xc8\xbe\xc5\x7e\x71\x7a\x36\xfc\xfe\xf7\xe1\xcf\xdf\x0e\x7f\xfc\x7a\x78\xf4\xef\xe5\x7f\x27\xa3\xef\xfe\xb9\x7c\xf1\x67\x4a\x33\x09\x17\x31\xc8\x04\xc6\x66\x68\x97\x7c\x2c\x28\xf7\x0f\x8c\x1b\x21\x41\xc5\x82\x2b\x50\x53\xfb\x20\x84\x57\x57\x56\x72\x26\x84\x70\x08\x2a\x90\x34\xd6\x69\xf9\xd6\x91\x32\x41\x00\x4a\x75\x4c\x84\x26\x99\x96\x9d\xf4\x63\xcc\xc1\x1e\x30\x52\x48\x86\x10\x7e\x57\x42\xc7\xe6\x79\xa7\x1a\x42\x87\x72\x6a\xf3\x16\x4f\x2f\x45\xed\xa5\xf9\xf1\x54\x96\x41\xa5\xec\xff\xc0\x61\x18\x13\x49\x18\x68\x90\x57\x07\x34\xfe\xe5\xb8\x71\xc2\x12\xb1\xb5\x45\xd8\xcf\x53\x48\x4e\xa5\xd4\x23\xe1\xd0\x50\x09\xb6\xbc\x5a\x1a\x78\x28\xea\x87\x06\x94\x5e\x84\xf9\xae\xc3\x5c\x93\x6e\x9e\x33\x6e\x8c\x77\xf8\x30\xdd\xc0\x07\xd9\xa3\x81\x53\xd3\xdd\x8a\x9b\x31\xad\x63\x41\xa7\x11\x55\xae\x30\x71\x17\x66\xeb\xf4\xf2\xf8\x74\xf8\xc3\x2f\xa3\x9f\xfe\xbe\x38\x3a\xcd\x44\x7a\xfe\xff\xc9\xe8\xb7\x6f\xc6\xe2\x9d\x23\xd8\x8f\x40\x37\x15\xc8\x14\xf4\x27\x76\xd7\xe7\xa5\xdd\x22\x81\xd7\x25\x63\x43\xc3\x72\x15\x1f\x1a\x90\xf3\x64\xdc\x21\x91\xca\xeb\x58\xf7\xe3\x24\xa9\xd2\x92\xf2\x6e\x7e\x71\x47\x48\x46\xac\x00\x30\xe5\xfa\x83\xf7\xf1\x23\x0a\x53\x02\x13\x3d\x70\xa5\x19\x42\x04\x1a\x66\xaa\xf3\xfc\xec\x38\x13\xe5\xe8\xaf\xb3\x97\xbf\xfe\x71\xad\x28\xbd\x64\x8f\xe7\x37\x47\x33\xdc\x6f\x98\x04\x97\xae\x47\xaa\x0e\x4c\x2b\x10\x21\x3c\x18\xdc\x9b\xe2\xd9\x13\x71\xeb\x69\x54\xef\xa1\x1a\x38\x7b\x6a\x39\x92\x75\x9e\x7e\x39\xed\xd6\x04\x63\x82\x67\xc2\x75\xfa\x7b\xc2\x4c\xb4\xf7\x21\xb8\xba\x1e\xec\xab\x2c\x06\xa9\x69\xae\x23\x71\x72\xcc\xb9\x1e\x5d\xb4\x7f\x74\xcd\x2e\x2e\xed\x0d\xa6\xba\xf9\xac\xb3\x24\x30\x28\x9d\x64\x37\xb8\x39\xee\xc4\xde\xd6\xf1\x76\xfc\x73\x67\x50\x5a\x06\x09\x81\x90\x61\x61\x08\x4e\x60\x12\x29\xc9\xb4\x74\x31\xd5\xc0\xf2\xf1\x0b\x43\x72\x2a\xe4\x25\x3b\x97\x4b\x77\xb1\x8a\xe7\x1e\x5b\x77\xa8\xb2\x1d\x7c\xf3\xc5\x30\x55\x82\x99\xed\xe7\x56\x36\x1b\x51\x8b\xaa\xcc\x5d\x9b\x8e\x93\xfb\xc6\xa4\x29\xbb\x15\x9e\x40\x18\xae\xef\xbf\x42\x10\x41\xa0\x61\x26\xcd\xb6\x10\x11\x10\x3e\x2b\xf3\xc4\x7d\x5b\xd5\x3c\xd1\xe6\x5c\x88\x44\xf1\x69\xf0\x4c\x69\x8c\x27\x74\x09\xf8\x9c\xaa\x30\x70\xc3\xa6\x6e\x30\xec\x37\x6b\xb5\xba\xef\xbb\x8f\xba\xba\xe7\xed\x78\xae\xa1\xe9\xd7\xbd\xd6\xf6\x4e\xa3\x55\xff\x7c\xd3\x6f\x14\x3c\x05\xeb\xa7\x75\xaf\xb6\xb1\xbe\xdd\x28\x5f\x93\x79\x0b\x1e\x7f\x63\xe7\xb3\xf2\x35\x89\xa7\x68\xdd\x6a\xce\x08\xdf\x6a\xa6\xc6\xd4\x96\xdd\xe2\xf6\xde\x25\x26\x4a\xa4\x3f\xa1\x3e\xb7\xb8\xc5\x59\x7b\x07\x8d\xbc\x9d\x66\x8f\x3c\xcd\xec\xf3\xab\x32\xa8\xbc\x0a\x00\x00\xff\xff\xda\xd0\x52\xd9\x8a\x13\x00\x00")

func proto_micro_mall_trolley_proto_trolley_business_trolley_business_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_trolley_proto_trolley_business_trolley_business_swagger_json,
		"proto/micro_mall_trolley_proto/trolley_business/trolley_business.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_trolley_proto/trolley_business/trolley_business.swagger.json": proto_micro_mall_trolley_proto_trolley_business_trolley_business_swagger_json,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_trolley_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"trolley_business": &_bintree_t{nil, map[string]*_bintree_t{
				"trolley_business.swagger.json": &_bintree_t{proto_micro_mall_trolley_proto_trolley_business_trolley_business_swagger_json, map[string]*_bintree_t{
				}},
			}},
		}},
	}},
}}
