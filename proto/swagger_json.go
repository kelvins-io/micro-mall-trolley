package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_trolley_proto_trolley_business_trolley_business_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4f\x6b\x13\x4f\x18\xbe\xe7\x53\x0c\xf3\xfb\x1d\x4b\x53\x8b\x78\xe8\xad\x86\x40\x6b\xb1\x95\xdd\x04\x04\x29\xcb\x64\xf7\x4d\x3a\xed\xce\xcc\x76\xfe\x44\x82\xe4\xe0\x45\xd4\x83\x17\xf1\xe0\xcd\x83\x28\x1e\x04\x0f\x82\x87\xe2\xb7\x31\xb6\x7e\x0b\x99\xdd\xcd\x76\xba\xbb\x69\xd3\xda\x88\xed\x29\xfb\xfe\x9b\xe7\x79\xe7\x79\xe7\xed\x93\x06\x42\x58\x3d\x26\x83\x01\x48\xbc\x86\xf0\xea\xf2\x0a\x5e\xb2\x36\xca\xfb\x02\xaf\x21\xeb\x47\x08\x6b\xaa\x63\xb0\xfe\x44\x0a\x2d\x9a\x8c\x86\x52\x04\x8c\xc4\x71\xa0\xa5\x88\x63\x18\x05\x99\x63\xfa\xd5\x33\x8a\x72\x50\xaa\x62\x58\x4e\xe3\xd2\x23\x10\xc2\x43\x90\x8a\x0a\x6e\x0b\xe7\x3f\x11\x17\x1a\x29\xd0\xb8\x81\xd0\x38\x05\x12\x0a\xae\x0c\x03\x85\xd7\xd0\xa3\x2c\x8b\x24\x49\x4c\x43\xa2\xa9\xe0\xcd\x7d\x25\xb8\x8d\xdd\x4d\x63\x13\x29\x22\x13\xce\x19\x4b\xf4\x9e\x3a\x65\xd8\x1c\xde\x9a\x82\x6d\xaa\x03\xd3\xdc\x17\x94\x17\x5e\x1b\x6e\xb4\xf3\x69\x9b\x66\x18\x23\x72\x64\xb1\xff\xfc\x76\x34\x79\xf9\x6e\xf2\xe6\xd9\xe4\xf5\xd3\xc9\xf3\x2f\x27\x5f\x3f\x1f\xbf\xf8\x74\xf2\xfd\x43\x4e\x33\x0d\x17\x09\xc8\x14\xc6\x66\x64\x53\xee\x09\xca\xfd\x03\xe3\x46\x48\x50\x89\xe0\x0a\xd4\x99\x73\x10\xc2\xab\x2b\x2b\x25\x13\x42\x38\x02\x15\x4a\x9a\xe8\xbc\x7d\xeb\x48\x99\x30\x04\xa5\xfa\x26\x46\xd3\x4a\xcb\x4e\xf9\x0c\x73\xb8\x07\x8c\x54\x8a\x21\x84\xff\x97\xd0\xb7\x75\xfe\x6b\x46\xd0\xa7\x9c\xda\xba\xd5\xdb\xcb\x51\x7b\x79\x7d\x7c\xa6\xca\xb8\x51\xf7\x7b\xec\x30\x4c\x88\x24\x0c\x34\xc8\xd3\x0b\xca\xfe\x4a\xdc\x38\x61\xa9\xd8\x7a\x22\x1a\x95\x29\xa4\xb7\x52\xeb\x91\x70\x68\xa8\x04\xdb\x5e\x2d\x0d\x2c\x8a\xfa\xa1\x01\xa5\xe7\x61\xbe\xeb\x30\xd7\x64\x50\xe6\x8c\x3b\xd9\x09\x77\xf3\x03\x7c\x90\x43\x1a\x3a\x3d\xdd\x6d\xb8\x15\xf3\x3e\x56\x74\x2a\x81\x89\x21\xb8\x4a\x8d\x20\x06\x0d\x33\xc5\xfa\xe3\xe8\x55\x21\xd0\xe3\x8f\x47\xbf\xde\xbe\xcf\x84\x7b\x8e\x58\xbd\xf4\x8c\x9b\x27\xd7\x02\xf7\xdf\x12\xac\xa1\x51\xbd\x5e\x0f\x0d\xc8\xf3\x04\xdb\x27\xb1\x2a\x2b\x56\x8f\x92\xb4\xa8\xd2\x92\xf2\x41\x39\xb9\x2f\x24\x23\xf6\x49\xc2\x94\xeb\x3b\xb7\x5d\x66\xe3\xa5\x8b\x91\xaa\x03\x13\x84\x22\x82\x85\xc1\xbd\x2c\x9e\x3d\x91\x04\xff\x46\xf7\x16\x35\xc0\xc5\x46\x73\x24\xeb\x6c\xd8\x92\x76\x5b\x82\x31\xc1\x0b\xe1\x3a\xf3\x3d\x65\x26\x7a\xfb\x10\xea\x82\x99\x5d\x7e\x09\x48\x4d\x4b\x13\x89\xd3\x6b\x2e\xcd\xe8\xbc\xf3\xa3\x5b\x36\xb9\x76\x36\x98\x1a\x94\xab\xce\x92\xc0\xb8\xf6\x25\xbb\xe0\x85\xfd\x03\xc6\x76\x0c\xcf\x87\xe6\xca\x61\xb6\x18\x5c\xba\xc5\xc0\xcc\xcb\xd9\xcd\xcd\xc5\x7d\xdd\x98\x34\x65\x57\xc2\x13\x0a\xc3\xf5\xf5\x77\x08\x62\x08\x35\xcc\xa4\xd9\x13\x22\x06\xc2\x67\x55\x9e\xba\xaf\xaa\x9a\xeb\x18\x14\x3b\x72\x57\x1b\x95\xd2\xb8\x5e\x92\x44\x75\x51\xdd\x50\x1a\xd9\x7b\x51\x03\xbe\xa4\x2a\x0c\xdc\xb0\x33\xef\x29\xf6\xbb\xad\x56\xdb\xf7\xdd\x7f\x31\xda\x9e\xb7\xe3\xb9\x86\xae\xdf\xf6\x82\xed\x9d\x4e\xd0\x7e\xb8\xe9\x77\x2a\x9e\x8a\xf5\x7e\xdb\x6b\x6d\xac\x6f\x77\xea\x73\x0a\x6f\xc5\xe3\x6f\xec\x3c\xa8\xcf\x49\x3d\x55\xeb\x56\x77\x46\xf8\x56\x37\x37\xe6\xb6\x62\xa7\xd8\x2d\x40\x4c\x9c\x4a\x7f\x4a\xfd\x74\x4f\x34\xc6\x8d\xdf\x01\x00\x00\xff\xff\xfd\x88\xc4\x59\x9a\x0d\x00\x00")

func proto_micro_mall_trolley_proto_trolley_business_trolley_business_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_trolley_proto_trolley_business_trolley_business_swagger_json,
		"proto/micro_mall_trolley_proto/trolley_business/trolley_business.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_trolley_proto/trolley_business/trolley_business.swagger.json": proto_micro_mall_trolley_proto_trolley_business_trolley_business_swagger_json,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_trolley_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"trolley_business": &_bintree_t{nil, map[string]*_bintree_t{
				"trolley_business.swagger.json": &_bintree_t{proto_micro_mall_trolley_proto_trolley_business_trolley_business_swagger_json, map[string]*_bintree_t{
				}},
			}},
		}},
	}},
}}
